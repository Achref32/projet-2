#include<LedControl.h>
const int din=13 ;
const int load=12 ;
const int clk=11 ;
const int nb_led_matrix=1 ;
const int  pin_bh=3 ;
const int pin_bb=2 ;
const int pin_bd=1 ;
const int pin_bg=0 ;

bool etat_but_droite ;
bool etat_but_gauche ;
bool etat_but_haut ;
bool etat_but_bas ;


typedef  struct snake snake ; 
struct snake { 
  int len ; 
  int head_pos[2] ;
  int body[8][2] ;
  int dir[2] ;
} ;

typedef struct apple apple ;
struct apple  { 
  int pos_app[2] ;
} ;
snake sn={2,{0,5},{{0,5},{1,5}},{1,0}} ;
apple ap={random(8),random(8)} ;

bool led[8] ={0,0,0,0,0,0,0,0}  ;
float temp_en_cours ;
float temp_inter ;
float temps; 
LedControl lc(din,clk,load,nb_led_matrix)  ;
bool etat_but(bool x) { 
  if (x==true) { 
    return(true) ;
  }
  else {
    return(false) ;
  }
}
float calcule_delta_temp(){ 
  float temp_en_cours=millis() ;
  float dt=temp_en_cours-temp_inter ;
  temp_inter=temps_en_cours ;
  return(dt) ;
}

void display_matrix() { 
  for(int i=0;i<8;i++) {
    lc.setRow(0,i,led[i]) ;
  }
}
void setup() { 
  lc.shutdown(0,false) ;
  lc.setIntensity(0,12) ;
  lc.clearDisplay(0) ;
  pinMode(pin_bh,INPUT) ;
  pinMode(pin_bb,INPUT) ;
  pinMode(pin_bd,INPUT) ;
  pinMode(pin_bg,INPUT) ;
}

void loop() { 
  float delta_temp=calcule_delta_temp() ;
  temp=temp+delta_temp ;

  etat_but_droite=digitalRead(pin_bd) ;
  etat_but_gauche=digitalRead(pin_bg) ;
  etat_but_haut=digitalRead(pin_bh) ;
  etat_but_bas=digitalRead(pin_bb) ;

  if (etat_but(etat_but_droite)==true) { 
    sn.dir[0]=0 ;
    sn.dir[1]=1 ;
  }
  else if (etat_but(etat_but_gauche)==true) { 
    sn.dir[0]=0 ;
    sn.dir[1]=-1 ;
  }
  else if(etat_but(etat_but_haut)==true){ 
    sn.dir[0]=-1 ;
    sn.dir[1]=0 ;
  }
  else if (etat_but(etat_but_bas)==true) { 
    sn.dir[0]=1 ;
    sn.dir[1]= 0 ;
  }

  if (temp>1000/3 ) { 
    temp=0 ;
    mise_a_jour() ;
  }
  display_matrix() ;
}



void mise_a_jour() { 
  reset() ;
  int new_head[2]={sn.head_pos[0]+sn.dir[0],sn.head_pos[1]+sn.dir[1]} ;
  if (new_head[0]==8){
    new_head[0]=0 ;
  }
  else if(new_head[1]==8) { 
    new_head[1]=0 ;
  }
  else if (new_head[0]==-1) {
    new_head[0]=7 ;
  }
  else if (new_head[1]==-1){
    new_head[1]=7 ;
  }
  for (int i=0;i<sn.len;j++ ) {
    if (new_head[0]==sn.body[i][0] and new_head[1]==sn.body[i][1] {
      reset() ;
      delay(1000) ;
      snake sn={2,{0,5},{{0,5},{1,5}},{1,0}}  ;
      apple ap={random(8),random(8) } ;
      return ;
    }
  }
  else if (new_head[0]==ap.pos_app[0] and new_head[1]==ap.pos_app[1]) {
    sn.len=sn.len+1 ;
    ap.pos_app[0]=random(8)  ;
    ap.pos_app[1]= random(8) ;
  }

  else {
    continuite() ;
    }
    sn.body[sn.len-1][0]=new_head[0] ;
    sn.body[sn.len-1][1]=new_head[1] ;
    sn.head_pos[0]=new_head[0] ;
    sn.head_pos[1]=new_head[1] ;

    for (int j=0;j<sn.len;j++) { 
      led[sn.body[j][0]] |= 128 >> sn.body[j][1] ;
    }
    led[ap.pos_app[0]} |=128 >> ap.pos_app[1] ;
}

 void continuite() { 
  for (int i=1;i<sn.len;i++) { 
      sn.body[i-1][0]=sn.body[i][0] ;
      sn.body[i-1][1]=sn.bodt[i][1] ;
 }
}
